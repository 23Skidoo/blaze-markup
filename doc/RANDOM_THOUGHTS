Purpose: Gather random thoughts before getting them into real shape.
====================================================================

DEAR READER, I just thought I'd rather share it a bit earlier to get some
feedback tomorrow. However, be warned this is far from complete. Just some
thoughts that (hopefully) lead to further good thoughts and ideas. If you
don't like to read a extremely bumped draft. Just wait and read the polished
version that is coming up.


Introduction
------------

(copy from Johan Tibell's proposal)


Design
------

The core of BlazeHtml is the 'Html' typeclass in
'Text.BlazeHtml.Internal.Class'. It features a set of combinators for
describing (possibly infinitely branching) forests consisting of raw text
leaves, leaves with a name and attributes, and nodes with a name and
attributes. 

On top of these basic combinators various derived combinators can be built for 

Instances of the 'Html' typeclass then provide renderings of html documents
specified using....

Links
-----

ESAPI cross-site scripting attacks avoidance cheat sheet.
http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet

Google Code Repository of ESAPI reference implementation.
http://code.google.com/p/owasp-esapi-java/
(Note Google Code or just this repository seems to only half working. Therefore
I checked the relevant codecs in at doc/esapi_escaping_codecs/ )

References to GHC interacting with inlining, rewriting rules, and associated types.
http://unlines.wordpress.com/2009/11/05/tricking-ghc-into-evaluating-recursive-functions-at-compile-time/


Optimizing
----------

In order to sensibly optimize our library, we need to make assumptions about
the standard uses cases. Then we can map these to benchmarks and see how they
perform.

One of the core assumptions is that a substantial portion of the output to
generate is statically (i.e. at compile time) known. What is dynamically
determined is the nesting and concatenation of these static parts and the
values of the parameters and the text leaves. More precisely we assume that

  1. The names of the tags are statically known.
  2. Most of the 


We need the following comparison:

   baseline: one strict render outside and then IO using the same TextOutputter
   actual test: a direct output using HtmlIO

Questions
---------

1. What is the difference between using [Char] and Text as a representation type.

   Approach 1: Have a module define the text representation to be used
     throughout BlazeHtml and compile once with [Char] and once with Text.

     Manage these two version using git branches.

   Approach 2: Generalize the HtmlClass to either specify the representation
     type using an associated type or to export all functions with both
     options.

2. Isn't all the IO in Haskell based on handles? If yes, then why don't we get
ourselves some extra slack and implement HtmlIO for outputting on a specific
handle? This would also solve the problem of how switching between outputting
[Char] and Text and possibly even Char.
==> We could write away

  Text.hPutStr (pack s) = Prelude.hPutStr s

if this saves us some time.


Rewrite rules
-------------

POSSIBLY we need to fork off different version of HtmlIO to allow for an easy
comparison.

In general, we may want to achieve code with as few allocations as possible.
This corresponds pretty much to the goal of not having any intermediate data
structures if possible.

Its important to identify the terms we need to handle:
(Note here "abc" will always have type [Char]).

Our HtmlIO type is parametrized over an outputter. It must satisfy the law

  out (t1 `mappend` t2) = out t1 >> out t2

We furthermore assume that evaluating the right-hand side is cheaper than 
evaluating the left-hand side. (NEEDS TO BE VERIFIED)

Assume we have a newtype 'TextOutputter' and a newtype 'StringOutputter'.

QUESTION: Need to decide whether it is beneficial to use both a string and
a textoutputter.

  1. What is the cost of threading both functions through.
  1.1 In terms of implementation difficulty (having rewrite rules that work)
  1.2 In terms of execution speed

  2. What is faster outputting string literals or outputting text literals.

  3. Should the internals 

HMM why not suport both? Would also be convenient for the users.
  ==> would also allow to use 'show' and the like.
  
  CORE question: What can be output faster: short string literals or short text
  literals.

Possibly we have to
tag it with a newtype to ensure

static string literals:

  out (pack "static string")
= Prelude.hPutStr "static string"

  hPutStr h (concat ts) 
= mapM_ (hPutStr h) ts

static attribute lists should be computed away to a sequence of IO actions.
This requires tagging the renderAttributes function accordingly. Assume its
called renderAttrs

  renderAttrs out (Cons (k::Text,v::Text) xs)
= out " " >>  ....

