

Bundle 1: Measure Performance Baseline
======================================

Taks 1.1: Switch HtmlIO to Handle based IO
------------------------------------------

Synopsis: Currently renderHtmlIO takes an arbitrary function `Text -> IO ()`
for outputting text. This is severly restricting our optimization possibilities
as the given function may not always be the optimal one for outputting the
given data. We can mitigate this by switching to outputting using a given
`Handle`. This is sufficient as both our main use cases: file generation and 
network socket saturation are accessed through handles.


Taks 1.2: Use CPS for accumulating attributes
---------------------------------------------

Synposis: The current implementation of attribute accumulation uses O(n^2) time
in the worst case. This is due to the naive use of concatenation for repeated
appending. It can easily be fixed by using a type signature

  Html h => ((Attributes -> Attributes) -> (Attributes -> Attributes)) -> h -> h

for the `modifyUnescapedAttributes` function and the corresponding CPS
implementation for `setUnescapedAttributes` and the like.

Goal: Switch to CPS style and provide additional implementations for setting
and adding _single_ attributes `setUnescapedAttribute` and
`addUnescapedAttributed`.


Task 1.3: Abstract over concrete Text representation to be used
---------------------------------------------------------------

Synposis: Currently we fixed the text representation to `Data.Text`. However,
initial measurements show that this may not be the optimal representation for
small static strings. We need more measurements to see the impact of the concrete
representation. Therefore, I suggest adding a module

  Text.BlazeHtml.Text

which re-exports in the current branch

  Data.Text and Data.Text.IO   and possibly further required functions

and in a second branch called 'string_master"

  [Char]  wrapped up such that it mimics the interface provided by the
  implementation above.

This will make changing the underlying text representation as simple as
changing the implementation of `Text.BlazeHtml.Text`. This change can either be
done using the C preprocessor and a command line flag or by developing two
separate branches.

I prefer the preprocessor version, especially if it is possible to build our
benchmark application using both representations. The implementor of this taks
has to investigate this.

NOTE: The goal of this task is to enable us to investigate different choices of
the text representation WITHOUT resorting to advanced type hackery. This helps
us keeping complexity low and hence, it makes the effect of our changes
understandable.


Taks 1.4: Write core benchmarks
-------------------------------

Synopsis: We will use a small set of core benchmarks and optimize their time
and memory use. They represent our assumptions about the problem domain. These
assumptions are: 

  [Please feel free to challenge and adapt these assumptions. Especially the
   numbers are just veeery rough estimates.]

  1. Tag names are statically known and have an average length of 4 characters.
  2. Attributes names are statically known and have an average length of 4
     characters.
  3. 50% of the text leaves are statically known and have an average length of
     200 characters. 
  4. Attribute values are 
     
     can be approximated in a rough
     manner using arbitrary 6

... more to come





Task 1.5: Run base line test cases and build comprehensible report
------------------------------------------------------------------


... more to come





  

